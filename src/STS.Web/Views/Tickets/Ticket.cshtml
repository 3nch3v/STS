@using STS.Web.ViewModels.Tickets;
@using static STS.Common.GlobalConstants;
@model TicketViewModel;
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery

@{
    ViewData["Title"] = Model.Title;
    ViewData["ticketId"] = Model.Id;
    var requestToken = Antiforgery.GetAndStoreTokens(Context).RequestToken;
    ViewData["requestToken"] = requestToken;
}

<article class="ticket-search">
    <section>
        <button class="show-create-btn" title="Create a new ticket...">New Ticket</button>
    </section>
    <section class="search-section">
        <form asp-controller="Tickets" asp-action="Tickets" method="get">
            <input class="search-input-field"
                   name="keyword"
                   type="text"
                   required
                   minlength=2
                   placeholder="Search..." />
            <button class="search-btn" type="submit">Search</button>
        </form>
    </section>
</article>

<article class="ticket-container">
    <section class="tickets-nav-section">
        <vc:tickets-nav-bar></vc:tickets-nav-bar>
    </section>

    <section class="ticket-wrapper">

        <section class="ticket" data-ticket-id="@Model.Id" data-request-token="@requestToken">

            <section class="ticket-actions">
                <div>
                    <select class="t-status-select"
                            asp-items="@Model.Statuses
                                .Where(x => x.Name != Model.StatusName)
                                .Select(x => new SelectListItem(x.Name, x.Id.ToString()))">
                        <option selected="selected" value="@Model.StatusId">@Model.StatusName</option>
                    </select>

                    <select class="t-department-select"
                            asp-items="@Model.Departments
                                .Where(x => x.Name != Model.DepartmentName)
                                .Select(x => new SelectListItem(x.Name, x.Id.ToString()))">
                        <option selected="selected" value="@Model.DepartmentId">@Model.DepartmentName</option>
                    </select>

                    <select class="t-employee-select"
                            asp-items="@Model.Employees
                                .Where(x => x.UserName != Model.AssignedToUserName)
                                .Select(x => new SelectListItem(x.UserName, x.Id))">
                        <option selected="selected" value="@Model.AssignedToId">@(Model.AssignedToUserName ?? "Select user")</option>
                    </select>
                </div>
                <div>
                    @if (Model.AssignedToId != Model.LoggedInUserId)
                    {
                        <a href="javascript.void(0)"
                           type="button"
                           class="assign-to-me-btn"
                           data-my-id="@Model.LoggedInUserId"
                        >
                            Assign to me
                        </a>
                    }
                    @if (Model.IsOwner)
                    {
                        <a asp-controller="Tickets"
                           asp-action="Delete"
                           asp-route-id="@Model.Id"
                           class="t-delete-btn"
                        >
                            <i class="fa fa-trash fa-lg"></i>
                        </a>
                    }
                </div>
            </section>

            <section class="ticket-details">

                <section class="ticket-details-title">
                    <section class="tile-status-priority">
                        <span class="status @Model.StatusName.ToLower().Replace(" ", "")">@Model.StatusName</span>
                        <span class="priority @Model.PriorityName.ToLower().Replace(" ", "")">@Model.PriorityName</span>
                    </section>

                    <section class='t-title-section'>
                        <section class='t-title'>
                            <p class="ticket-title">
                                @Model.Title
                                @if (Model.IsOwner)
                                {
                                    <a class="edit-t-title" href="javascript.void(0)">
                                        <i class="fa fa-edit"></i>
                                    </a>
                                }
                            </p>
                        </section>
                         <section class='t-title-section-edited'></section>
                    </section>

                   
                </section>

                <section class="ticket-body-section">
                    <p class="ticket-content">
                        @Model.Content
                        @if (Model.IsOwner)
                        {
                            <a class="edit-t-content" href="javascript.void(0)">
                                <i class="fa fa-edit"></i>
                            </a>
                        }
                    </p>
                </section>

                <section class="t-content-section-edited"></section>

                <section class="ticket-footer">
                    <div>
                        <p>
                            from
                            <span class="username">@Model.EmployeeUserName</span>
                            created on
                            <span class="date">@Model.CreatedOn</span>
                        </p>
                    </div>
                    <div>
                        <p class="assigned-to-username">
                            <span class="name-prefix">@(Model.AssignedToUserName == null ? "unassigned" : "Assigned to")</span>
                            <span class="username">@(Model.AssignedToUserName == null ? null : Model.AssignedToUserName)</span>
                        </p>
                    </div>
                </section>
            </section>
        </section>

        <section class="ticket-comments">
            @foreach (var comment in Model.Comments)
            {
                <section class="t-comment">
                    <p>@comment.Content</p>

                    <div class="comment-actions">
                        <div>
                            <span>
                                from
                                <span class="username">@comment.UserUserName</span>
                                on
                                <span class="date">@comment.CreatedOn</span>
                            </span>
                        </div>
                        <div>
                            @if (Model.LoggedInUserId == comment.UserId)
                            {
                                <button class="c-del-btn t-delete-btn"
                                title="Delete comment."
                                data-comment-id="@comment.Id"
                                data-request-token="@requestToken">
                                    <i class="fa fa-trash"></i>
                                </button>
                            }
                        </div>

                    </div>
                </section>
            }
        </section>

        <section class="t-comment-btn-section">
            <button class="t-comment-btn">Comment</button>
        </section>
    </section>

    <aside class="tasks-review">
        <p class="daily-tasks">Daily tasks</p>
        <vc:tasks-side-bar is-manager=false tasks-count=TasksSideBarCount></vc:tasks-side-bar>
    </aside>

</article>

<dialog class="create-dialog">
    <vc:create-ticket></vc:create-ticket>
</dialog>

<dialog class="comment-dialog">
    <partial name="_CommentFormPartial" view-data="ViewData"></partial>
</dialog>

@section Scripts {
<script type="module" src="~/js/services/create-ticket-dialog-service.js"></script>
<script type="module" src="~/js/services/comments-services.js"></script>
<script type="module" src="~/js/services/tickets-services.js"></script>
<script type="module" src="~/js/services/create-ticket-validation.js"></script>
}
